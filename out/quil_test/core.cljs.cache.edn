{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name quil-test.core, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware}, :uses nil, :defs {setup {:protocol-inline nil, :meta {:file "C:\\Users\\sam1373\\Documents\\clojure\\quil-test\\src\\quil_test\\core.cljs", :line 5, :column 7, :end-line 5, :end-column 12, :arglists (quote ([]))}, :name quil-test.core/setup, :variadic false, :file "src\\quil_test\\core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, timer {:protocol-inline nil, :meta {:file "C:\\Users\\sam1373\\Documents\\clojure\\quil-test\\src\\quil_test\\core.cljs", :line 25, :column 7, :end-line 25, :end-column 12, :arglists (quote ([p]))}, :name quil-test.core/timer, :variadic false, :file "src\\quil_test\\core.cljs", :end-column 12, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, old? {:protocol-inline nil, :meta {:file "C:\\Users\\sam1373\\Documents\\clojure\\quil-test\\src\\quil_test\\core.cljs", :line 29, :column 7, :end-line 29, :end-column 11, :arglists (quote ([p]))}, :name quil-test.core/old?, :variadic false, :file "src\\quil_test\\core.cljs", :end-column 11, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, update-state {:protocol-inline nil, :meta {:file "C:\\Users\\sam1373\\Documents\\clojure\\quil-test\\src\\quil_test\\core.cljs", :line 33, :column 7, :end-line 33, :end-column 19, :arglists (quote ([state]))}, :name quil-test.core/update-state, :variadic false, :file "src\\quil_test\\core.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, draw-state {:protocol-inline nil, :meta {:file "C:\\Users\\sam1373\\Documents\\clojure\\quil-test\\src\\quil_test\\core.cljs", :line 65, :column 7, :end-line 65, :end-column 17, :arglists (quote ([state]))}, :name quil-test.core/draw-state, :variadic false, :file "src\\quil_test\\core.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, quil-test {:protocol-inline nil, :meta {:file "C:\\Users\\sam1373\\Documents\\clojure\\quil-test\\src\\quil_test\\core.cljs", :line 95, :column 14, :end-line 95, :end-column 23, :export true, :arglists (quote ([]))}, :name quil-test.core/quil-test, :variadic false, :file "src\\quil_test\\core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:y :nothing :hsb :fn :color :time :parts :update :size :setup :middleware :host :col :host-id :no-start :x :draw}, :order [:hsb :color :x :y :parts :time :col :nothing :host :update :size :setup :middleware :draw :no-start :fn :host-id]}, :doc nil}